% 蒙特卡洛概率全局最优
% 核心思想: 总集 > 测试集 ; 两者又不能差太大！
% 假如篮子里有1000个苹果(你定的测试集)，让你每次闭着眼睛找一个最大的，可以不限制挑选次数;
% 于是，你可以闭着眼随机拿了一个，然后再随机拿一个与第一个比，留下大的;
% 再随机拿一个，与前次留下的比较，又可以留下大的;
% 循环往复这样：拿的次数越多，挑出最大苹果的可能性也就越大!
% 但除非你把1000个苹果都挑一遍，否则你无法肯定最终挑出来的就是最大的一个。
% 如果有10000个苹果的话，继续如此说不定就能找到更大的！

% 测试集不能太小，否则搜到极小值就是小概率事件了！
% 大数定理: 搜到极小值的概率 ≈ 测试集/总集   
% 理论上越接近越好，但是不变的核心就是：看运气！！ 因为在随机！！

clc;
clear;
syms x y;
f =(x+y)^2 + (x+1)^2 + (y+3)^2;

% 做图:原始3d曲面图
x = -20:0.1:20;
y = -15:0.1:15;
[X,Y] = meshgrid(x,y); 
Z = (X+Y).^2 + (X+1).^2 + (Y+3).^2;
figure(1);
mesh(X,Y,Z);
xlabel('横坐标x'); ylabel('纵坐标y'); zlabel('空间坐标z');
hold on;
% 做图:原始点/起始对比点
x0 = 10; y0 = -1.5;
f_min = (x0+y0)^2 + (x0+1)^2 + (y0+3)^2;
plot3(x0,y0,f_min,'r*');
hold on  

% 全区域: 401*301 总集有12w+种可能:(x,y)
% 网格大小影响最后极值点的精度！因为间距0.1 那(x,y)都不会有比0.1更精确的值！
% 但是网格搞的越大总集就越大，总集越大对应的测试集相应必须也得搞大！
x_all = -20:0.1:20;
y_all = -15:0.1:15;

fprintf('已知:精确极值坐标(0.33333,-1.66667,5.33333)\n')
fprintf('蒙特卡洛随机抽样开始:\n\n')
num = 1;
count = 0;  % 记录所有测试数据中有几次成功前进了！
while num < 100000  % 测试集10w  测试集太小找到极值的概率就很小!
    x = x_all(randperm(length(x_all),1));
    y = y_all(randperm(length(y_all),1));
    if eval(f) < f_min
        count = count + 1;
        f_min = eval(f);
        x_tmp = x;
        y_tmp = y;
        fprintf('当前极小值坐标为:(%.5f,%.5f,%.5f)\n', x_tmp, y_tmp, f_min);
        fprintf('当前成功替换次数:%d\n\n',count)
        plot3(x_tmp, y_tmp, f_min, 'r*');
        hold on;
    end
    num = num + 1;
end
hold off;
% 图像中有很多散乱分布的点;
% 这些点越靠近极值点,是越新产生的点！这是机制决定的！
    